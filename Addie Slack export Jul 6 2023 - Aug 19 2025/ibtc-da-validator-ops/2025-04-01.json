[
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743496175.004509",
        "client_msg_id": "24193d0b-7724-45c0-8b6d-ae4a9fc282c0",
        "text": "Hello <@UEHLS0JUB> <@UMW95BAT1>\n\nI am encountering a not-too-descriptive error in my experiments. Managed to transfer an iBTC `Holding` from `alice` to `bob`. I want to then burn from `bob`. However, before I get to do that, when I try to `[(bobTokenCid, _)] &lt;- query @Holding bob` , the compiler is complaining, but won't tell me why, except\n```Script execution failed:\n  Unhandled exception:  DA.Exception.GeneralError:GeneralError@f181cd661f7af3a60bdaae4b0285a2a67beb55d6910fc8431dbae21a5825ec0f with\n                          message =\n                            \"Pattern match failure in do expression at \/Users\/scolear\/Coding\/dlc-link\/canton\/daml\/test\/daml\/IBTC\/VaultTest.daml:143:3-20\"\n\nLedger time: 1970-01-01T00:00:00Z```",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "reply_count": 9,
        "reply_users_count": 1,
        "latest_reply": "1743513300.488839",
        "reply_users": [
            "U088UV6MKFE"
        ],
        "replies": [
            {
                "user": "U088UV6MKFE",
                "ts": "1743496230.752619"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743496305.957079"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743496389.227489"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743496404.173149"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743496724.102589"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743497046.736969"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743497098.451049"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743504020.620529"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743513300.488839"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lZZPh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello "
                            },
                            {
                                "type": "user",
                                "user_id": "UEHLS0JUB"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UMW95BAT1"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI am encountering a not-too-descriptive error in my experiments. Managed to transfer an iBTC "
                            },
                            {
                                "type": "text",
                                "text": "Holding",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from "
                            },
                            {
                                "type": "text",
                                "text": "alice",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "bob",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I want to then burn from "
                            },
                            {
                                "type": "text",
                                "text": "bob",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". However, before I get to do that, when I try to "
                            },
                            {
                                "type": "text",
                                "text": "[(bobTokenCid, _)] <- query @Holding bob",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , the compiler is complaining, but won't tell me why, except\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Script execution failed:\n  Unhandled exception:  DA.Exception.GeneralError:GeneralError@f181cd661f7af3a60bdaae4b0285a2a67beb55d6910fc8431dbae21a5825ec0f with\n                          message =\n                            \"Pattern match failure in do expression at \/Users\/scolear\/Coding\/dlc-link\/canton\/daml\/test\/daml\/IBTC\/VaultTest.daml:143:3-20\"\n\nLedger time: 1970-01-01T00:00:00Z"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743496230.752619",
        "client_msg_id": "d896f2e8-24f1-4487-a53f-37a2d4633d62",
        "text": "I can provide more code context if needed",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ng53z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can provide more code context if needed"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743496305.957079",
        "client_msg_id": "7fb95e01-90a0-4ce6-a115-4fce84b27c8b",
        "text": "Actually, yeah, here is the whole script. Line `143` fails.\n\n```module IBTC.VaultTest where\n\nimport DA.Assert\nimport DA.Action (void)\nimport DA.Set as Set\nimport Daml.Script\nimport Utility.Registry.Holding.V0.Holding\nimport Utility.Registry.Holding.V0.Types\n\nimport IBTC.Governance\nimport IBTC.Vault\nimport IBTC.Test (submitConfirmationsAndExercise, getBalance)\nimport DA.List (last, head)\n\n-- Test additional vault operations and edge cases\nvaultTest = script do\n  registrar &lt;- allocateParty \"decentralized-registrar\"\n  operator &lt;- allocateParty \"utility-operator\"\n  [attestor1, attestor2, attestor3] &lt;- mapA (\\i -&gt; allocateParty (\"attestor-\" &lt;&gt; show i)) [1..3]\n  alice &lt;- allocateParty \"alice\"\n  bob &lt;- allocateParty \"bob\"\n\n  let instrument = InstrumentIdentifier with\n        source = registrar\n        id = \"iBTC\"\n        scheme = \"Internal\"\n\n  -- Initial setup\n  ibtcRules &lt;- submit registrar $ createCmd IBTCVaultRules with\n    registrar\n    operator\n    instrument\n\n  submit registrar $ createCmd IBTCGovernanceRules with\n    registrar\n    operator\n    instrument\n    members = Set.fromList [attestor1, attestor2, attestor3]\n\n  Some ibtcRulesD &lt;- queryDisclosure registrar ibtcRules\n\n  -- Test creating multiple vaults for different users\n  IBTCVaultRules_CreateVaultResult aliceVaultCid &lt;-\n    submitWithDisclosures alice [ibtcRulesD] $ exerciseCmd ibtcRules (IBTCVaultRules_CreateVault alice)\n  IBTCVaultRules_CreateVaultResult bobVaultCid &lt;-\n    submitWithDisclosures bob [ibtcRulesD] $ exerciseCmd ibtcRules (IBTCVaultRules_CreateVault bob)\n\n  -- Process Alice's vault\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultCid\n    vaultConfirmationAction = Vault_SetPending IBTCVault_SetPending with\n      wdBtcTx = \"alice-btc-tx-0\"\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultCid\n    vaultConfirmationAction = Vault_SetFunded IBTCVault_SetFunded with\n      newAmountLocked = 10.0\n      fundingBtcTx = \"alice-btc-tx-0\"\n\n  -- Process Bob's vault\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = bobVaultCid\n    vaultConfirmationAction = Vault_SetPending IBTCVault_SetPending with\n      wdBtcTx = \"bob-btc-tx-0\"\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = bobVaultCid\n    vaultConfirmationAction = Vault_SetFunded IBTCVault_SetFunded with\n      newAmountLocked = 20.0\n      fundingBtcTx = \"bob-btc-tx-0\"\n\n  -- Verify balances\n  aliceBalance &lt;- getBalance registrar instrument alice\n  bobBalance &lt;- getBalance registrar instrument bob\n  aliceBalance === 10.0\n  bobBalance === 20.0\n\n  -- Test partial burn by Alice\n  [(aliceTokenCid, _)] &lt;- query @Holding alice\n  [(aliceVaultCid, _)] &lt;- query @IBTCVault alice\n\n  submit alice $ exerciseCmd aliceVaultCid IBTCVault_Burn with\n    tokens = [aliceTokenCid]\n    amountToBurn = 5.0\n\n  -- Verify correct change was returned\n  aliceBalance &lt;- getBalance registrar instrument alice\n  aliceBalance === 5.0\n\n  -- Test additional funding to Alice's vault\n  [(aliceVaultCid, vault)] &lt;- query @IBTCVault alice\n  let aliceVaultConfirmationId = vaultId (aliceVaultCid, vault)\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultConfirmationId\n    vaultConfirmationAction = Vault_SetPending IBTCVault_SetPending with\n      wdBtcTx = \"alice-btc-tx-1\"\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultConfirmationId\n    vaultConfirmationAction = Vault_SetFunded IBTCVault_SetFunded with\n      newAmountLocked = 15.0\n      fundingBtcTx = \"alice-btc-tx-1\"\n\n  -- Verify Alice's balance was increased\n  aliceBalance &lt;- getBalance registrar instrument alice\n  aliceBalance === 15.0\n\n  -- Confirm initial balances before transfer\n  bobBalance &lt;- getBalance registrar instrument bob\n  bobBalance === 20.0\n\n  -- Transfer 3.0 tokens from Alice to Bob\n  aliceHoldings &lt;- queryFilter @Holding alice (\\h -&gt; h.registrar == registrar &amp;&amp; h.instrument == instrument)\n\n  let firstHolding = head aliceHoldings\n\n  debug $ \"Holding ID: \" &lt;&gt; show (fst firstHolding)\n  debug $ \"Holding amount: \" &lt;&gt; show (amount . snd $ firstHolding)\n\n  splictCids &lt;- submitMulti [alice, registrar] [] $ exerciseCmd (fst firstHolding) Holding_Split with\n        amounts = [7.0, 3.0]\n\n  debug $ \"Split CIDs: \" &lt;&gt; show splictCids\n\n  let secondHoldingCid =  (last splictCids.splitCids)\n\n  -- Transfer requires authorization from all three parties: alice (current owner),\n  -- bob (new owner), and registrar (issuer)\n  void $ submitMulti [alice, bob, registrar] [] $ exerciseCmd secondHoldingCid Holding_Transfer with\n    newOwner = bob\n    newLabel = \"Transferred from Alice\"\n\n  -- Verify balances after transfer\n\n  aliceBalanceAfter &lt;- getBalance registrar instrument alice\n  bobBalanceAfter &lt;- getBalance registrar instrument bob\n\n  aliceBalanceAfter === 12.0\n  bobBalanceAfter === 23.0\n\n  -- Test burn after transfer\n  [(bobTokenCid, _)] &lt;- query @Holding bob\n  [(bobVaultCid, _)] &lt;- query @IBTCVault bob\n\n  submit bob $ exerciseCmd bobVaultCid IBTCVault_Burn with\n    tokens = [bobTokenCid]\n    amountToBurn = 23.0\n\n  -- Verify Bob's balance after burn\n  bobBalanceAfterBurn &lt;- getBalance registrar instrument bob\n  bobBalanceAfterBurn === 0.0\n\n  pure ()```",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K3Rxk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually, yeah, here is the whole script. Line "
                            },
                            {
                                "type": "text",
                                "text": "143",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fails.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "module IBTC.VaultTest where\n\nimport DA.Assert\nimport DA.Action (void)\nimport DA.Set as Set\nimport Daml.Script\nimport Utility.Registry.Holding.V0.Holding\nimport Utility.Registry.Holding.V0.Types\n\nimport IBTC.Governance\nimport IBTC.Vault\nimport IBTC.Test (submitConfirmationsAndExercise, getBalance)\nimport DA.List (last, head)\n\n-- Test additional vault operations and edge cases\nvaultTest = script do\n  registrar <- allocateParty \"decentralized-registrar\"\n  operator <- allocateParty \"utility-operator\"\n  [attestor1, attestor2, attestor3] <- mapA (\\i -> allocateParty (\"attestor-\" <> show i)) [1..3]\n  alice <- allocateParty \"alice\"\n  bob <- allocateParty \"bob\"\n\n  let instrument = InstrumentIdentifier with\n        source = registrar\n        id = \"iBTC\"\n        scheme = \"Internal\"\n\n  -- Initial setup\n  ibtcRules <- submit registrar $ createCmd IBTCVaultRules with\n    registrar\n    operator\n    instrument\n\n  submit registrar $ createCmd IBTCGovernanceRules with\n    registrar\n    operator\n    instrument\n    members = Set.fromList [attestor1, attestor2, attestor3]\n\n  Some ibtcRulesD <- queryDisclosure registrar ibtcRules\n\n  -- Test creating multiple vaults for different users\n  IBTCVaultRules_CreateVaultResult aliceVaultCid <-\n    submitWithDisclosures alice [ibtcRulesD] $ exerciseCmd ibtcRules (IBTCVaultRules_CreateVault alice)\n  IBTCVaultRules_CreateVaultResult bobVaultCid <-\n    submitWithDisclosures bob [ibtcRulesD] $ exerciseCmd ibtcRules (IBTCVaultRules_CreateVault bob)\n\n  -- Process Alice's vault\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultCid\n    vaultConfirmationAction = Vault_SetPending IBTCVault_SetPending with\n      wdBtcTx = \"alice-btc-tx-0\"\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultCid\n    vaultConfirmationAction = Vault_SetFunded IBTCVault_SetFunded with\n      newAmountLocked = 10.0\n      fundingBtcTx = \"alice-btc-tx-0\"\n\n  -- Process Bob's vault\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = bobVaultCid\n    vaultConfirmationAction = Vault_SetPending IBTCVault_SetPending with\n      wdBtcTx = \"bob-btc-tx-0\"\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = bobVaultCid\n    vaultConfirmationAction = Vault_SetFunded IBTCVault_SetFunded with\n      newAmountLocked = 20.0\n      fundingBtcTx = \"bob-btc-tx-0\"\n\n  -- Verify balances\n  aliceBalance <- getBalance registrar instrument alice\n  bobBalance <- getBalance registrar instrument bob\n  aliceBalance === 10.0\n  bobBalance === 20.0\n\n  -- Test partial burn by Alice\n  [(aliceTokenCid, _)] <- query @Holding alice\n  [(aliceVaultCid, _)] <- query @IBTCVault alice\n\n  submit alice $ exerciseCmd aliceVaultCid IBTCVault_Burn with\n    tokens = [aliceTokenCid]\n    amountToBurn = 5.0\n\n  -- Verify correct change was returned\n  aliceBalance <- getBalance registrar instrument alice\n  aliceBalance === 5.0\n\n  -- Test additional funding to Alice's vault\n  [(aliceVaultCid, vault)] <- query @IBTCVault alice\n  let aliceVaultConfirmationId = vaultId (aliceVaultCid, vault)\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultConfirmationId\n    vaultConfirmationAction = Vault_SetPending IBTCVault_SetPending with\n      wdBtcTx = \"alice-btc-tx-1\"\n\n  submitConfirmationsAndExercise registrar instrument [attestor1, attestor2, attestor3] VaultConfirmationAction with\n    vaultConfirmationId = aliceVaultConfirmationId\n    vaultConfirmationAction = Vault_SetFunded IBTCVault_SetFunded with\n      newAmountLocked = 15.0\n      fundingBtcTx = \"alice-btc-tx-1\"\n\n  -- Verify Alice's balance was increased\n  aliceBalance <- getBalance registrar instrument alice\n  aliceBalance === 15.0\n\n  -- Confirm initial balances before transfer\n  bobBalance <- getBalance registrar instrument bob\n  bobBalance === 20.0\n\n  -- Transfer 3.0 tokens from Alice to Bob\n  aliceHoldings <- queryFilter @Holding alice (\\h -> h.registrar == registrar && h.instrument == instrument)\n\n  let firstHolding = head aliceHoldings\n\n  debug $ \"Holding ID: \" <> show (fst firstHolding)\n  debug $ \"Holding amount: \" <> show (amount . snd $ firstHolding)\n\n  splictCids <- submitMulti [alice, registrar] [] $ exerciseCmd (fst firstHolding) Holding_Split with\n        amounts = [7.0, 3.0]\n\n  debug $ \"Split CIDs: \" <> show splictCids\n\n  let secondHoldingCid =  (last splictCids.splitCids)\n\n  -- Transfer requires authorization from all three parties: alice (current owner),\n  -- bob (new owner), and registrar (issuer)\n  void $ submitMulti [alice, bob, registrar] [] $ exerciseCmd secondHoldingCid Holding_Transfer with\n    newOwner = bob\n    newLabel = \"Transferred from Alice\"\n\n  -- Verify balances after transfer\n\n  aliceBalanceAfter <- getBalance registrar instrument alice\n  bobBalanceAfter <- getBalance registrar instrument bob\n\n  aliceBalanceAfter === 12.0\n  bobBalanceAfter === 23.0\n\n  -- Test burn after transfer\n  [(bobTokenCid, _)] <- query @Holding bob\n  [(bobVaultCid, _)] <- query @IBTCVault bob\n\n  submit bob $ exerciseCmd bobVaultCid IBTCVault_Burn with\n    tokens = [bobTokenCid]\n    amountToBurn = 23.0\n\n  -- Verify Bob's balance after burn\n  bobBalanceAfterBurn <- getBalance registrar instrument bob\n  bobBalanceAfterBurn === 0.0\n\n  pure ()"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743496389.227489",
        "client_msg_id": "c2da4b8e-15ca-4b16-8fb1-f57fb8355e30",
        "text": "oooo i see",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lkvGc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oooo i see"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743496404.173149",
        "client_msg_id": "109a5595-8021-4232-8c34-83b9093c0487",
        "text": "right bob obv has multiple holdings now",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AA0ij",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right bob obv has multiple holdings now"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743496724.102589",
        "client_msg_id": "8a9de232-f360-49db-a272-4859d7aa6509",
        "text": "cool thanks. I also see now I am thinking too far ahead with the burning of all of bob's tokens. we'll keep you posted what we are planning :slightly_smiling_face:",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k7vFH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cool thanks. I also see now I am thinking too far ahead with the burning of all of bob's tokens. we'll keep you posted what we are planning "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743497046.736969",
        "client_msg_id": "6830d9bb-e736-4be1-87e1-7b2dc47e3ffa",
        "text": "Related question, I have noticed that Transfer requires authorization from all three parties. How does this work in production? I imagine the registrar pre-approves all transfers automatically?",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aIWYw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Related question, I have noticed that Transfer requires authorization from all three parties. How does this work in production? I imagine the registrar pre-approves all transfers automatically?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743497098.451049",
        "client_msg_id": "435fa835-dcfd-45d9-85b5-c4c146c05259",
        "text": "If we want people to freely transfer iBTC around, that is",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SR\/Of",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we want people to freely transfer iBTC around, that is"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743504020.620529",
        "client_msg_id": "7f49ae95-cf91-4d9c-8989-3e8fcb06683b",
        "text": "Thanks!\nYeah I mean if alice wants to transfer an iBTC holding to bob, but they need the approval of the registrar. So indeed the Holding_Transfer choice in my understanding.\n\nAnd with the TransferOffer, the same question arises I guess, is that we need to approve transfers between parties unrelated to us. But ok! Not an urgent question",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+czwN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks!\nYeah I mean if alice wants to transfer an iBTC holding to bob, but they need the approval of the registrar. So indeed the Holding_Transfer choice in my understanding.\n\nAnd with the TransferOffer, the same question arises I guess, is that we need to approve transfers between parties unrelated to us. But ok! Not an urgent question"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743513300.488839",
        "client_msg_id": "5c384c59-5de0-492d-86ed-e3359ae07337",
        "text": "I only have just heard of the OfferTransfer model :slightly_smiling_face: I have used the Holding_Transfer choice in my tests, which is fine for now. So to answer your question, I don't know yet what I will need :smile:",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743496175.004509",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Mb41",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I only have just heard of the OfferTransfer model "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " I have used the Holding_Transfer choice in my tests, which is fine for now. So to answer your question, I don't know yet what I will need "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743514512.144099",
        "client_msg_id": "1d3c2cde-e910-44f0-b6aa-afdd57591b7d",
        "text": "More questions! :nerd_face:\n\nI see that the `registrar` is the `controller` of the choices on the Vault template.\n\nSo I can call\n```pendingVaultCid &lt;- submit registrar $ exerciseCmd aliceVaultCid IBTCVault_SetPending with\n  wdBtcTx = \"direct-tx-1\"```\nfine, even after setting up the Governance rules. So I wonder if this is expected implementation-wise. The `registrar` will have the power to bypass the necessary quorum? <@UEHLS0JUB>",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743514512.144099",
        "reply_count": 3,
        "reply_users_count": 1,
        "latest_reply": "1743518962.266419",
        "reply_users": [
            "U088UV6MKFE"
        ],
        "replies": [
            {
                "user": "U088UV6MKFE",
                "ts": "1743515357.886429"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743518616.768129"
            },
            {
                "user": "U088UV6MKFE",
                "ts": "1743518962.266419"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZA5PR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More questions! "
                            },
                            {
                                "type": "emoji",
                                "name": "nerd_face",
                                "unicode": "1f913"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI see that the "
                            },
                            {
                                "type": "text",
                                "text": "registrar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the "
                            },
                            {
                                "type": "text",
                                "text": "controller",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the choices on the Vault template.\n\nSo I can call\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "pendingVaultCid <- submit registrar $ exerciseCmd aliceVaultCid IBTCVault_SetPending with\n  wdBtcTx = \"direct-tx-1\""
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fine, even after setting up the Governance rules. So I wonder if this is expected implementation-wise. The "
                            },
                            {
                                "type": "text",
                                "text": "registrar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will have the power to bypass the necessary quorum? "
                            },
                            {
                                "type": "user",
                                "user_id": "UEHLS0JUB"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743515357.886429",
        "client_msg_id": "c9cb9223-a3a2-43a1-aed6-da1da5688364",
        "text": "Very interesting, thank you. follow ups!\n\nSo what are the reasons for not using this solution alone for the governance flow?\n\nWho is calling this mapping for updates to the threshold, and how?",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743514512.144099",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N38X5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting, thank you. follow ups!\n\nSo what are the reasons for not using this solution alone for the governance flow?\n\nWho is calling this mapping for updates to the threshold, and how?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743518616.768129",
        "client_msg_id": "e868c573-daa4-4554-9665-f264921cd117",
        "text": "Thank you both, I understand the indirection part and its very neat.\n\nI still don't quite get the last bit though: \"the on-ledger choices replace the need for off-ledger signature aggregation.\", but it sounds like we need some consensus to set the PartyToParticipant mapping through the DecentralizedNamespaceDefinition, to disable direct 'registrar' choice execution and enable the indirections, no?\n\nSo my question still kinda stands, by whom\/when is the mapping set initially (and updates to it afterwards)? If it's not in the daml code. Hope this question makes sense",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743514512.144099",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0X+cu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you both, I understand the indirection part and its very neat.\n\nI still don't quite get the last bit though: \"the on-ledger choices replace the need for off-ledger signature aggregation.\", but it sounds like we need some consensus to set the PartyToParticipant mapping through the DecentralizedNamespaceDefinition, to disable direct 'registrar' choice execution and enable the indirections, no?\n\nSo my question still kinda stands, by whom\/when is the mapping set initially (and updates to it afterwards)? If it's not in the daml code. Hope this question makes sense"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743518962.266419",
        "client_msg_id": "23c59f84-bc3d-448a-99a8-0d42b8dbb9d5",
        "text": "I see. So this part is an async, off-ledger signature aggregation. Which we can do for a topology transaction, but not for submitting directly for a party on a choice",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1743514512.144099",
        "parent_user_id": "U088UV6MKFE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cU2rk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. So this part is an async, off-ledger signature aggregation. Which we can do for a topology transaction, but not for submitting directly for a party on a choice"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U088UV6MKFE",
        "type": "message",
        "ts": "1743520393.634819",
        "client_msg_id": "5529a98f-1788-4ce1-af7a-101fa0efd392",
        "text": "I made some new tests, nothing super interesting, mostly me learning DAML and the contracts, but they do increase coverage: <https:\/\/github.com\/DLC-link\/canton\/pull\/3>",
        "team": "T05FWTX7PMG",
        "user_team": "T05FWTX7PMG",
        "source_team": "T05FWTX7PMG",
        "user_profile": {
            "avatar_hash": "88f054e6b2e2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-04-15\/8759384805844_88f054e6b2e25bb0bd26_72.jpg",
            "first_name": "Robert",
            "real_name": "Robert Tera",
            "display_name": "Robert Tera",
            "team": "T05FWTX7PMG",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/q8Hv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made some new tests, nothing super interesting, mostly me learning DAML and the contracts, but they do increase coverage: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/DLC-link\/canton\/pull\/3"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]